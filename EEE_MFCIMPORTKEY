OpenSSLライブラリを使用してPEM形式の秘密鍵ファイルをバイナリ形式に変換し、それをCNGに渡すためのサンプルコードは以下の通りです。このコードはC++で書かれており、OpenSSLのライブラリがインストールされていることを前提としています。

```cpp
#include <iostream>
#include <windows.h>
#include <bcrypt.h>
#include <fstream>
#include <vector>
#include <openssl/pem.h>
#include <openssl/ec.h>

#pragma comment(lib, "bcrypt.lib")
#pragma comment(lib, "libcrypto.lib")

// PEM形式の秘密鍵ファイルをバイナリ形式に変換
bool ConvertPEMtoBinary(const std::wstring& pemFilePath, std::vector<BYTE>& binaryData) {
    FILE* pemFile = _wfopen(pemFilePath.c_str(), L"rb");
    if (!pemFile) {
        std::wcerr << L"PEMファイルを開けませんでした。" << std::endl;
        return false;
    }

    EVP_PKEY* pkey = PEM_read_PrivateKey(pemFile, NULL, NULL, NULL);
    fclose(pemFile);

    if (!pkey) {
        std::wcerr << L"PEMファイルから秘密鍵を読み取れませんでした。" << std::endl;
        return false;
    }

    EC_KEY* ec_key = EVP_PKEY_get1_EC_KEY(pkey);
    if (!ec_key) {
        std::wcerr << L"ECキーを取得できませんでした。" << std::endl;
        EVP_PKEY_free(pkey);
        return false;
    }

    const EC_GROUP* ec_group = EC_KEY_get0_group(ec_key);
    const BIGNUM* private_key = EC_KEY_get0_private_key(ec_key);

    int private_key_size = BN_num_bytes(private_key);
    if (private_key_size <= 0) {
        std::wcerr << L"秘密鍵のバイト数が無効です。" << std::endl;
        EC_KEY_free(ec_key);
        EVP_PKEY_free(pkey);
        return false;
    }

    binaryData.resize(private_key_size);
    BN_bn2bin(private_key, binaryData.data());

    EC_KEY_free(ec_key);
    EVP_PKEY_free(pkey);
    return true;
}

int main() {
    // PEM形式の秘密鍵ファイルのパス
    const std::wstring pemFilePath = L"C:\\path\\to\\your\\private_key.pem";

    std::vector<BYTE> binaryPrivateKey;
    if (!ConvertPEMtoBinary(pemFilePath, binaryPrivateKey)) {
        return 1;
    }

    BCRYPT_ALG_HANDLE hAlgorithm = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;

    // CNGを初期化
    if (FAILED(BCryptOpenAlgorithmProvider(&hAlgorithm, BCRYPT_ECDSA_P256_ALGORITHM, NULL, 0))) {
        std::wcerr << L"CNGの初期化に失敗しました。" << std::endl;
        return 1;
    }

    // 秘密鍵をインポート
    if (FAILED(BCryptImportKeyPair(hAlgorithm, NULL, BCRYPT_PRIVATE_KEY_BLOB, &hKey, binaryPrivateKey.data(), static_cast<ULONG>(binaryPrivateKey.size()), 0))) {
        std::wcerr << L"秘密鍵のインポートに失敗しました。" << std::endl;
        BCryptCloseAlgorithmProvider(hAlgorithm, 0);
        return 1;
    }

    std::wcout << L"秘密鍵がインポートされました。" << std::endl;

    // リソースを解放
    BCryptDestroyKey(hKey);
    BCryptCloseAlgorithmProvider(hAlgorithm, 0);
    return 0;
}
```

このコードでは、OpenSSLを使用してPEM形式の秘密鍵ファイルをバイナリ形式に変換する関数 `ConvertPEMtoBinary` を追加しました。そして、バイナリ形式の秘密鍵をCNGにインポートしています。ライブラリやヘッダーファイルのパスに注意し、必要なライブラリをリンクしてください。また、エラーハンドリングを適切に実装してセキュリティに注意を払うことをお勧めします。
