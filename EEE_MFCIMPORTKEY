C++のMFCを使用してECDSA秘密鍵ファイルから秘密鍵を読み込み、キーコンテナに格納するには、CNG（Cryptography Next Generation）を使用することができます。以下は、その手順のサンプルコードと解説です。

```cpp
#include <iostream>
#include <windows.h>
#include <bcrypt.h>

#pragma comment(lib, "bcrypt.lib")

int main() {
    // ECDSA秘密鍵を含むファイルのパス
    const wchar_t* keyFilePath = L"C:\\path\\to\\your\\private_key.pem";

    // キーコンテナの名前
    const wchar_t* keyContainerName = L"MyECDSAPrivateKey";

    // ファイルから秘密鍵を読み込む
    FILE* keyFile = _wfopen(keyFilePath, L"rb");
    if (!keyFile) {
        std::wcerr << L"ファイルを開けませんでした。" << std::endl;
        return 1;
    }

    fseek(keyFile, 0, SEEK_END);
    long keyFileSize = ftell(keyFile);
    fseek(keyFile, 0, SEEK_SET);

    BYTE* keyData = new BYTE[keyFileSize];
    fread(keyData, 1, keyFileSize, keyFile);
    fclose(keyFile);

    // CNGを初期化
    if (FAILED(BCryptOpenAlgorithmProvider(&hAlgorithm, BCRYPT_ECDSA_P256_ALGORITHM, NULL, 0))) {
        std::wcerr << L"CNGの初期化に失敗しました。" << std::endl;
        return 1;
    }

    // キーコンテナを作成
    if (FAILED(BCryptCreatePersistedKey(hAlgorithm, &hKey, BCRYPT_ECDSA_PRIVATE_P256_MAGIC, keyContainerName, 0, 0))) {
        std::wcerr << L"キーコンテナの作成に失敗しました。" << std::endl;
        BCryptCloseAlgorithmProvider(hAlgorithm, 0);
        return 1;
    }

    // 秘密鍵をキーコンテナにインポート
    if (FAILED(BCryptImportKeyPair(hAlgorithm, NULL, BCRYPT_PRIVATE_KEY_BLOB, &hKey, keyData, keyFileSize, 0))) {
        std::wcerr << L"秘密鍵のインポートに失敗しました。" << std::endl;
        BCryptDeleteKey(hKey, 0);
        BCryptCloseAlgorithmProvider(hAlgorithm, 0);
        return 1;
    }

    std::wcout << L"秘密鍵がキーコンテナに格納されました。" << std::endl;

    // リソースを解放
    BCryptCloseAlgorithmProvider(hAlgorithm, 0);
    delete[] keyData;
    return 0;
}
```

このコードでは、まずECDSA秘密鍵をファイルから読み込み、次にCNGを初期化します。その後、指定した名前でキーコンテナを作成し、秘密鍵をインポートします。最後に、必要なリソースを解放します。

注意事項:
1. キーコンテナ名は一意である必要があります。既存のキーコンテナと重複しないようにしてください。
2. 必要に応じてエラーハンドリングを強化し、エラーが発生した場合に適切に処理してください。
3. BCRYPT_ECDSA_P256_ALGORITHMに対応するアルゴリズムを使用していることを確認してください。必要に応じて他のアルゴリズムに変更できます。
