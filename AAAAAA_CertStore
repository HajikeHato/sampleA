#include <windows.h>
#include <wincrypt.h>
#include <iostream>
#include <openssl/pem.h>
#include <openssl/pkcs12.h>
#include <openssl/err.h>

#pragma comment(lib, "crypt32.lib")

void printOpenSSLError() {
    unsigned long errCode;
    char errBuf[256];
    errCode = ERR_get_error();
    ERR_error_string_n(errCode, errBuf, sizeof(errBuf));
    std::cerr << "OpenSSL Error: " << errBuf << std::endl;
}

int main() {
    // 証明書の個人ストアを開く
    HCERTSTORE hCertStore = CertOpenSystemStore(NULL, "MY");
    if (hCertStore == NULL) {
        std::cerr << "Failed to open personal certificate store." << std::endl;
        return 1;
    }

    // 証明書と秘密鍵の取得
    PCCERT_CONTEXT pCertContext = CertFindCertificateInStore(hCertStore, X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, 0, CERT_FIND_ANY, nullptr, nullptr);
    if (pCertContext == nullptr) {
        std::cerr << "Failed to find a certificate." << std::endl;
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    // PKCS#12を作成
    EVP_PKEY* pkey = EVP_PKEY_new();
    if (pkey == nullptr) {
        std::cerr << "Failed to allocate EVP_PKEY." << std::endl;
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    if (!CertGetCertificateContextProperty(pCertContext, CERT_KEY_PROV_HANDLE_PROP_ID, 0, &pkey)) {
        std::cerr << "Failed to get private key handle." << std::endl;
        EVP_PKEY_free(pkey);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    PKCS12* p12 = PKCS12_create(nullptr, "MyPassphrase", pkey, pCertContext, nullptr, 0, 0, 0, 0, 0);
    if (p12 == nullptr) {
        std::cerr << "Failed to create PKCS#12." << std::endl;
        printOpenSSLError();
        EVP_PKEY_free(pkey);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    // PKCS#12をバッファに書き出し
    BIO* bio_out = BIO_new(BIO_s_mem());
    if (!i2d_PKCS12_bio(bio_out, p12)) {
        std::cerr << "Failed to write PKCS#12 to buffer." << std::endl;
        printOpenSSLError();
        PKCS12_free(p12);
        EVP_PKEY_free(pkey);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    // バッファからX509とEVP_PKEYに変換
    PKCS12_free(p12);
    EVP_PKEY_free(pkey);
    CertFreeCertificateContext(pCertContext);
    CertCloseStore(hCertStore, 0);

    BUF_MEM* bio_buf;
    BIO_get_mem_ptr(bio_out, &bio_buf);

    BIO* bio_in = BIO_new_mem_buf(bio_buf->data, bio_buf->length);
    X509* x509 = nullptr;
    EVP_PKEY* evp_pkey = nullptr;
    d2i_PKCS12_bio(bio_in, &p12);
    if (PKCS12_parse(p12, "MyPassphrase", &evp_pkey, &x509, nullptr) == 0) {
        std::cerr << "Failed to parse PKCS#12." << std::endl;
        printOpenSSLError();
        PKCS12_free(p12);
        BIO_free(bio_in);
        BIO_free(bio_out);
        return 1;
    }

    // ここでX509とEVP_PKEYを使って必要な処理を行います

    // リソースの解放
    PKCS12_free(p12);
    EVP_PKEY_free(evp_pkey);
    X509_free(x509);
    BIO_free(bio_in);
    BIO_free(bio_out);

    return 0;
}
