動かす場合

ServerController serverController;

if (!serverController.startServer())
{
    std::cerr << "Failed to start the server." << std::endl;
    return 1;
}

// クライアント受信監視
serverController.listenForClients();

serverController.stopServer();

return 0;


ヘッダ

#pragma once

#include <string>
#include <Winsock2.h>
#include <openssl/ssl.h>
#include <openssl/bio.h>

#pragma comment(lib, "ws2_32.lib")

class ServerController
{
public:
    ServerController();
    ~ServerController();

    bool startServer();
    void stopServer();
    void listenForClients();
    bool sendCommand(const std::string& commandData);
    std::string receiveCommand();

private:
    SSL_CTX* ctx;
    SOCKET serverSocket;
    SSL* ssl;
    SOCKET clientSocket;

    void initializeSSL();
    void loadCertificates();
    void cleanupSSL();
    void acceptClientConnection();
};


ソース
#include "ServerController.h"
#include <iostream>

ServerController::ServerController()
{
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        std::cerr << "Failed to initialize Winsock." << std::endl;
        return;
    }

    initializeSSL();
    loadCertificates();
}

ServerController::~ServerController()
{
    cleanupSSL();
    closesocket(serverSocket);
    WSACleanup();
}

bool ServerController::startServer()
{
    // ソケットの作成とバインド
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET)
    {
        std::cerr << "Failed to create socket." << std::endl;
        return false;
    }

    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(8888);

    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
    {
        std::cerr << "Failed to bind socket." << std::endl;
        closesocket(serverSocket);
        return false;
    }

    // サーバのリスニング
    if (listen(serverSocket, 5) == SOCKET_ERROR)
    {
        std::cerr << "Failed to listen." << std::endl;
        closesocket(serverSocket);
        return false;
    }

    return true; // 成功の場合
}

void ServerController::stopServer()
{
    // ソケットをクローズ
    closesocket(serverSocket);
}

void ServerController::acceptClientConnection()
{
    sockaddr_in clientAddr;
    int addrLen = sizeof(clientAddr);
    clientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &addrLen);
    if (clientSocket == INVALID_SOCKET)
    {
        std::cerr << "Failed to accept client connection." << std::endl;
        return;
    }

    // SSLコンテキストを作成し、ソケットをSSL化
    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, clientSocket);
    if (SSL_accept(ssl) <= 0)
    {
        std::cerr << "SSL handshake error." << std::endl;
        closesocket(clientSocket);
        return;
    }
}

bool ServerController::sendCommand(const std::string& commandData)
{
    if (!ssl)
    {
        std::cerr << "No active SSL connection." << std::endl;
        return false;
    }

    int bytesSent = SSL_write(ssl, commandData.c_str(), commandData.size());
    if (bytesSent <= 0)
    {
        std::cerr << "Failed to send command data." << std::endl;
        return false;
    }

    return true; // 成功の場合
}

std::string ServerController::receiveCommand()
{
    std::string receivedData;

    if (!ssl)
    {
        std::cerr << "No active SSL connection." << std::endl;
        return receivedData;
    }

    const int bufferSize = 1024;
    char buffer[bufferSize];

    int bytesRead = SSL_read(ssl, buffer, bufferSize - 1);
    if (bytesRead <= 0)
    {
        std::cerr << "Failed to receive command data." << std::endl;
        return receivedData;
    }

    buffer[bytesRead] = '\0';
    receivedData = buffer;

    return receivedData;
}

void ServerController::listenForClients()
{
    acceptClientConnection();

    while (true)
    {
        std::string receivedData = receiveCommand();
        if (!receivedData.empty())
        {
            std::cout << "Received command from client: " << receivedData << std::endl;
        }
    }
}
