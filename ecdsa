多分公開鍵情報セットしたほうがいいかも？
    EC_KEY* ec_key = EVP_PKEY_get1_EC_KEY(pCertContext->pCertInfo->SubjectPublicKeyInfo.PublicKey);
    if (!ec_key) {
        std::cerr << "Failed to get ECDSA private key from certificate." << std::endl;
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }


----------------------------------------------------------------------------------------------
#include <iostream>
#include <windows.h>
#include <wincrypt.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/ec.h>

int main() {
    SSL_library_init();
    OpenSSL_add_all_algorithms();
    SSL_load_error_strings();

    SSL_CTX* ssl_ctx = SSL_CTX_new(TLSv1_2_server_method());
    if (!ssl_ctx) {
        std::cerr << "SSL context creation failed." << std::endl;
        return 1;
    }

    HCERTSTORE hCertStore = CertOpenSystemStore(0, "MY");
    if (!hCertStore) {
        std::cerr << "Failed to open certificate store." << std::endl;
        return 1;
    }

    PCCERT_CONTEXT pCertContext = CertFindCertificateInStore(hCertStore, X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, 0, CERT_FIND_SUBJECT_STR, L"Your_Server_Certificate_Common_Name", NULL);
    if (!pCertContext) {
        std::cerr << "Failed to find server certificate in store." << std::endl;
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    HCRYPTPROV hCryptProv;
    if (!CryptAcquireCertificatePrivateKey(pCertContext, 0, NULL, &hCryptProv, NULL, NULL)) {
        std::cerr << "Failed to acquire private key for server certificate." << std::endl;
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    EVP_PKEY* pkey = EVP_PKEY_new();
    if (!pkey) {
        std::cerr << "Failed to create EVP_PKEY object." << std::endl;
        CryptReleaseContext(hCryptProv, 0);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    EC_KEY* ec_key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
    if (!ec_key) {
        std::cerr << "Failed to create EC_KEY object." << std::endl;
        EVP_PKEY_free(pkey);
        CryptReleaseContext(hCryptProv, 0);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    EC_KEY_set_private_key(ec_key, BN_bin2bn(hCryptProv, sizeof(hCryptProv), NULL));
    EVP_PKEY_assign_EC_KEY(pkey, ec_key);

    if (SSL_CTX_use_PrivateKey(ssl_ctx, pkey) != 1) {
        std::cerr << "Failed to set private key in SSL context." << std::endl;
        EVP_PKEY_free(pkey);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    // 証明書チェーンの設定
    if (SSL_CTX_use_certificate_chain_file(ssl_ctx, "Your_Certificate_Chain.pem") != 1) {
        std::cerr << "Failed to set certificate chain in SSL context." << std::endl;
        EVP_PKEY_free(pkey);
        CertFreeCertificateContext(pCertContext);
        CertCloseStore(hCertStore, 0);
        return 1;
    }

    // ソケットのセットアップと接続待機
    // ...

    // SSL接続の確立と通信の実行
    // ...

    // クリーンアップ
    // ...

    return 0;
}
