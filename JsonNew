#ifndef JSON_WRAPPER_H
#define JSON_WRAPPER_H

#include <rapidjson/document.h>
#include <rapidjson/prettywriter.h>
#include <rapidjson/filereadstream.h>
#include <rapidjson/filewritestream.h>
#include <cstdio>
#include <string>
#include <vector>
#include <unordered_map>

class JsonWrapper {
public:
    JsonWrapper() : document_(rapidjson::kObjectType) {}

    bool loadFromFile(const std::string& filename) {
        FILE* fp = std::fopen(filename.c_str(), "rb");
        if (!fp) {
            return false;
        }

        char buffer[65536]; // 64KB
        rapidjson::FileReadStream is(fp, buffer, sizeof(buffer));
        document_.ParseStream(is);

        std::fclose(fp);
        return !document_.HasParseError();
    }

    bool saveToFile(const std::string& filename) {
        FILE* fp = std::fopen(filename.c_str(), "wb");
        if (!fp) {
            return false;
        }

        char buffer[65536]; // 64KB
        rapidjson::FileWriteStream os(fp, buffer, sizeof(buffer));
        rapidjson::PrettyWriter<rapidjson::FileWriteStream> writer(os);
        document_.Accept(writer);

        std::fclose(fp);
        return true;
    }

    template<typename T>
    void addValue(const std::string& key, const T& value) {
        rapidjson::Value keyName(key.c_str(), document_.GetAllocator());
    
        if (document_.HasMember(key.c_str())) {
            rapidjson::Value& existingValue = document_[key.c_str()];
            if constexpr (std::is_same_v<T, int>) {
                existingValue.SetInt(value);
            } else if constexpr (std::is_same_v<T, double>) {
                existingValue.SetDouble(value);
            } else if constexpr (std::is_same_v<T, bool>) {
                existingValue.SetBool(value);
            } else if constexpr (std::is_same_v<T, std::string>) {
                existingValue.SetString(value.c_str(), value.length(), document_.GetAllocator());
            } else {
                static_assert(false, "Unsupported type for addValue");
            }
        } else {
            rapidjson::Value jsonValue;
            if constexpr (std::is_same_v<T, int>) {
                jsonValue.SetInt(value);
            } else if constexpr (std::is_same_v<T, double>) {
                jsonValue.SetDouble(value);
            } else if constexpr (std::is_same_v<T, bool>) {
                jsonValue.SetBool(value);
            } else if constexpr (std::is_same_v<T, std::string>) {
                jsonValue.SetString(value.c_str(), value.length(), document_.GetAllocator());
            } else {
                static_assert(false, "Unsupported type for addValue");
            }
            document_.AddMember(keyName, jsonValue, document_.GetAllocator());
        }
    }

    template<typename T>
    T getValue(const std::string& key, const T& defaultValue = T()) const {
        if (document_.HasMember(key.c_str())) {
            const rapidjson::Value& value = document_[key.c_str()];

            if constexpr (std::is_same_v<T, int>) {
                return value.IsInt() ? value.GetInt() : defaultValue;
            } else if constexpr (std::is_same_v<T, double>) {
                return value.IsDouble() ? value.GetDouble() : defaultValue;
            } else if constexpr (std::is_same_v<T, bool>) {
                return value.IsBool() ? value.GetBool() : defaultValue;
            } else if constexpr (std::is_same_v<T, std::string>) {
                return value.IsString() ? std::string(value.GetString(), value.GetStringLength()) : defaultValue;
            }
        }

        return defaultValue;
    }

    template<typename T>
    void addArray(const std::string& key, const std::vector<T>& values) {
        rapidjson::Value keyName(key.c_str(), document_.GetAllocator());
        rapidjson::Value jsonArray(rapidjson::kArrayType);

        for (const auto& value : values) {
            rapidjson::Value jsonValue;
            if constexpr (std::is_same_v<T, int>) {
                jsonValue.SetInt(value);
            } else if constexpr (std::is_same_v<T, double>) {
                jsonValue.SetDouble(value);
            } else if constexpr (std::is_same_v<T, bool>) {
                jsonValue.SetBool(value);
            } else if constexpr (std::is_same_v<T, std::string>) {
                jsonValue.SetString(value.c_str(), value.length(), document_.GetAllocator());
            } else {
                static_assert(false, "Unsupported type for addArray");
            }
            jsonArray.PushBack(jsonValue, document_.GetAllocator());
        }

        document_.AddMember(keyName, jsonArray, document_.GetAllocator());
    }

    template<typename T>
    std::vector<T> getArray(const std::string& key) const {
        std::vector<T> result;

        if (document_.HasMember(key.c_str())) {
            const rapidjson::Value& jsonArray = document_[key.c_str()];
            if (jsonArray.IsArray()) {
                for (rapidjson::SizeType i = 0; i < jsonArray.Size(); ++i) {
                    const rapidjson::Value& value = jsonArray[i];
                    if constexpr (std::is_same_v<T, int>) {
                        if (value.IsInt()) result.push_back(value.GetInt());
                    } else if constexpr (std::is_same_v<T, double>) {
                        if (value.IsDouble()) result.push_back(value.GetDouble());
                    } else if constexpr (std::is_same_v<T, bool>) {
                        if (value.IsBool()) result.push_back(value.GetBool());
                    } else if constexpr (std::is_same_v<T, std::string>) {
                        if (value.IsString()) result.push_back(std::string(value.GetString(), value.GetStringLength()));
                    }
                }
            }
        }

        return result;
    }

    void addObjectArray(const std::string& key, const std::vector<std::unordered_map<std::string, std::string>>& objects) {
        rapidjson::Value keyName(key.c_str(), document_.GetAllocator());
        rapidjson::Value jsonArray(rapidjson::kArrayType);

        for (const auto& object : objects) {
            rapidjson::Value jsonObject(rapidjson::kObjectType);
            for (const auto& pair : object) {
                rapidjson::Value jsonKey(pair.first.c_str(), document_.GetAllocator());
                rapidjson::Value jsonValue(pair.second.c_str(), document_.GetAllocator());
                jsonObject.AddMember(jsonKey, jsonValue, document_.GetAllocator());
            }
            jsonArray.PushBack(jsonObject, document_.GetAllocator());
        }

        document_.AddMember(keyName, jsonArray, document_.GetAllocator());
    }

    std::vector<std::unordered_map<std::string, std::string>> getObjectArray(const std::string& key) const {
        std::vector<std::unordered_map<std::string, std::string>> result;

        if (document_.HasMember(key.c_str())) {
            const rapidjson::Value& jsonArray = document_[key.c_str()];
            if (jsonArray.IsArray()) {
                for (rapidjson::SizeType i = 0; i < jsonArray.Size(); ++i) {
                    const rapidjson::Value& jsonObject = jsonArray[i];
                    if (jsonObject.IsObject()) {
                        std::unordered_map<std::string, std::string> objectMap;
                        for (rapidjson::Value::ConstMemberIterator it = jsonObject.MemberBegin(); it != jsonObject.MemberEnd(); ++it) {
                            if (it->name.IsString() && it->value.IsString()) {
                                objectMap[it->name.GetString()] = std::string(it->value.GetString(), it->value.GetStringLength());
                            }
                        }
                        result.push_back(objectMap);
                    }
                }
            }
        }

        return result;
    }

    std::vector<std::unordered_map<std::string, std::string>> getObjectArrayByCondition(const std::string& key, const std::string& conditionKey, const std::string& conditionValue) const {
        std::vector<std::unordered_map<std::string, std::string>> result;

        if (document_.HasMember(key.c_str())) {
            const rapidjson::Value& jsonArray = document_[key.c_str()];
            if (jsonArray.IsArray()) {
                for (rapidjson::SizeType i = 0; i < jsonArray.Size(); ++i) {
                    const rapidjson::Value& jsonObject = jsonArray[i];
                    if (jsonObject.IsObject()) {
                        std::string value = jsonObject[conditionKey.c_str()].GetString();
                        if (value == conditionValue) {
                            std::unordered_map<std::string, std::string> objectMap;
                            for (rapidjson::Value::ConstMemberIterator it = jsonObject.MemberBegin(); it != jsonObject.MemberEnd(); ++it) {
                                if (it->name.IsString() && it->value.IsString()) {
                                    objectMap[it->name.GetString()] = std::string(it->value.GetString(), it->value.GetStringLength());
                                }
                            }
                            result.push_back(objectMap);
                        }
                    }
                }
            }
        }

        return result;
    }

private:
    rapidjson::Document document_;
};

#endif // JSON_WRAPPER_H
