#pragma once

#include <iostream>
#include <fstream>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

class JsonWrapper {
public:
    JsonWrapper() = default;

    bool loadFromFile(const std::string& filename);
    bool saveToFile(const std::string& filename);

    template <typename T>
    void setValue(const std::string& key, const T& value);

    template <typename T>
    bool getValue(const std::string& key, T& value) const;

    size_t getArraySize(const std::string& key) const;
    const json& getArrayItem(const std::string& key, size_t index) const;

    template <typename T>
    void appendToArray(const std::string& key, const T& value);

    template <typename T>
    int findIndexOfValue(const std::string& key, const T& value) const;

    bool hasKey(const std::string& key) const;
    bool removeKey(const std::string& key);
    void clearArray(const std::string& key);
    bool renameKey(const std::string& oldKey, const std::string& newKey);
    void merge(const json& otherJson);
    bool isEmpty() const;
    void clear();

    // インライン関数の定義

    inline size_t getArraySize(const std::string& key) const {
        if (data_.contains(key) && data_[key].is_array()) {
            return data_[key].size();
        }
        return 0;
    }

    inline const json& getArrayItem(const std::string& key, size_t index) const {
        static json emptyObject;
        if (data_.contains(key) && data_[key].is_array() && index < data_[key].size()) {
            return data_[key][index];
        }
        return emptyObject;
    }

    template <typename T>
    inline void setValue(const std::string& key, const T& value) {
        data_[key] = value;
    }

    template <typename T>
    inline bool getValue(const std::string& key, T& value) const {
        if (data_.contains(key)) {
            try {
                value = data_[key].get<T>();
                return true;
            } catch (const std::exception& e) {
                std::cerr << "Error: Failed to get JSON value: " << e.what() << std::endl;
            }
        }
        return false;
    }

    template <>
    inline void setValue(const std::string& key, const std::string& value) {
        data_[key] = value;
    }

    template <>
    inline bool getValue(const std::string& key, std::string& value) const {
        if (data_.contains(key) && data_[key].is_string()) {
            value = data_[key];
            return true;
        }
        return false;
    }

    template <typename T>
    inline void appendToArray(const std::string& key, const T& value) {
        if (data_.contains(key) && data_[key].is_array()) {
            data_[key].push_back(value);
        }
    }

    template <typename T>
    inline int findIndexOfValue(const std::string& key, const T& value) const {
        if (data_.contains(key) && data_[key].is_array()) {
            int index = 0;
            for (const auto& item : data_[key]) {
                if (item == value) {
                    return index;
                }
                index++;
            }
        }
        return -1;
    }

    inline bool hasKey(const std::string& key) const {
        return data_.contains(key);
    }

    inline bool removeKey(const std::string& key) {
        if (data_.contains(key)) {
            data_.erase(key);
            return true;
        }
        return false;
    }

    inline void clearArray(const std::string& key) {
        if (data_.contains(key) && data_[key].is_array()) {
            data_[key].clear();
        }
    }

    inline bool renameKey(const std::string& oldKey, const std::string& newKey) {
        if (data_.contains(oldKey) && !data_.contains(newKey)) {
            data_[newKey] = data_[oldKey];
            data_.erase(oldKey);
            return true;
        }
        return false;
    }

    inline void merge(const json& otherJson) {
        data_.merge_patch(otherJson);
    }

    inline bool isEmpty() const {
        return data_.empty();
    }

    inline void clear() {
        data_.clear();
    }

private:
    json data_;
};

// ファイルからJSONデータを読み込む
inline bool JsonWrapper::loadFromFile(const std::string& filename) {
    std::ifstream file(filename, std::ios::in | std::ios::binary); // フラグを追加
    if (!file.is_open()) {
        std::cerr << "エラー：JSONファイルを開けませんでした：" << filename << std::endl;
        return false;
    }

    try {
        file >> data_;
    } catch (const std::exception& e) {
        std::cerr << "エラー：JSONファイルのパースに失敗しました：" << e.what() << std::endl;
        file.close();
        return false;
    }

    file.close();
    return true;
}

// JSONデータをファイルに保存する
inline bool JsonWrapper::saveToFile(const std::string& filename) {
    std::ofstream file(filename, std::ios::out | std::ios::binary); // フラグを追加
    if (!file.is_open()) {
        std::cerr << "エラー：JSONファイルを作成/開けませんでした：" << filename << std::endl;
        return false;
    }

    try {
        file << data_.dump(4); // 4つのスペースで整形して保存
    } catch (const std::exception& e) {
        std::cerr << "エラー：JSONのシリアライズに失敗しました：" << e.what() << std::endl;
        file.close();
        return false;
    }

    file.close();
    return true;
}
