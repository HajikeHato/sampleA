#pragma once

#include <iostream>
#include <fstream>
#include <vector>
#include "rapidjson/document.h"
#include "rapidjson/writer.h"
#include "rapidjson/stringbuffer.h"

class JSONWrapper {
public:
    rapidjson::Document document;

    JSONWrapper() {
        document.SetObject();
    }

    bool loadFromFile(const std::string& filename) {
        std::ifstream ifs(filename);
        if (!ifs.is_open()) {
            return false;
        }

        rapidjson::IStreamWrapper isw(ifs);
        document.ParseStream(isw);

        return !document.HasParseError();
    }

    bool saveToFile(const std::string& filename) {
        std::ofstream ofs(filename);
        if (!ofs.is_open()) {
            return false;
        }

        rapidjson::OStreamWrapper osw(ofs);
        rapidjson::Writer<rapidjson::OStreamWrapper> writer(osw);
        document.Accept(writer);

        return true;
    }

    template<typename T>
    void setValue(const std::string& key, const T& value) {
        rapidjson::Value v(value);
        document.AddMember(rapidjson::StringRef(key.c_str()), v, document.GetAllocator());
    }

    template<typename T>
    bool getValue(const std::string& key, T& value) const {
        if (!document.HasMember(key.c_str())) {
            return false;
        }

        const rapidjson::Value& v = document[key.c_str()];
        if (!v.Is<T>()) {
            return false;
        }

        value = v.Get<T>();
        return true;
    }

    void addArrayElement(const rapidjson::Value& element) {
        if (!document.IsArray()) {
            document.SetArray();
        }
        document.PushBack(element, document.GetAllocator());
    }

    bool getArrayElement(size_t index, rapidjson::Value& element) const {
        if (!document.IsArray() || index >= document.Size()) {
            return false;
        }

        element.CopyFrom(document[index], document.GetAllocator());
        return true;
    }

    bool findArrayElement(const std::string& key, const std::string& value, rapidjson::Value& element) const {
        if (!document.IsArray()) {
            return false;
        }

        for (rapidjson::Value::ConstValueIterator it = document.Begin(); it != document.End(); ++it) {
            if ((*it).HasMember(key.c_str()) && (*it)[key.c_str()].IsString() && (*it)[key.c_str()].GetString() == value) {
                element.CopyFrom(*it, document.GetAllocator());
                return true;
            }
        }

        return false;
    }
};
