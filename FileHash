#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <openssl/ssl.h>
#include <openssl/err.h>

// 関数のプロトタイプ宣言
std::string readFile(const std::string& filename);
std::string calculateHash(const std::string& content);
void initOpenSSL();
SSL_CTX* createSSLContext();
void cleanupOpenSSL();

int main() {
    std::string filename = "example.txt"; // 送信したいファイルの名前
    std::string content = readFile(filename);
    std::string hash = calculateHash(content);

    // 送信するデータをつなげる
    std::string dataToSend = filename + "\n" + content + "\n" + hash;

    initOpenSSL();

    // TLS接続のセットアップ
    SSL_CTX* ctx = createSSLContext();
    SSL* ssl;

    // TLSセッションの確立
    int server = 0; // クライアントモードで接続
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in dest;

    dest.sin_family = AF_INET;
    dest.sin_port = htons(443); // 通信先のポート番号 (httpsのデフォルトポート)
    inet_pton(AF_INET, "127.0.0.1", &(dest.sin_addr));

    connect(sockfd, (struct sockaddr*)&dest, sizeof(dest));

    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, sockfd);
    SSL_connect(ssl);

    // データを送信
    SSL_write(ssl, dataToSend.c_str(), dataToSend.size());

    // TLSセッションの終了
    SSL_free(ssl);
    SSL_CTX_free(ctx);
    close(sockfd);

    cleanupOpenSSL();

    return 0;
}

std::string readFile(const std::string& filename) {
    std::ifstream file(filename);
    if (!file) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return "";
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

std::string calculateHash(const std::string& content) {
    // ここでファイル内容のハッシュを計算する方法は任意です
    // 例としてSHA256を使用しますが、実際には必要に応じて変更してください
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((const unsigned char*)content.c_str(), content.size(), hash);

    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }

    return ss.str();
}

void initOpenSSL() {
    SSL_load_error_strings();
    OpenSSL_add_ssl_algorithms();
}

SSL_CTX* createSSLContext() {
    const SSL_METHOD* method = TLSv1_2_client_method();
    SSL_CTX* ctx = SSL_CTX_new(method);
    if (!ctx) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }
    return ctx;
}

void cleanupOpenSSL() {
    EVP_cleanup();
}



受信側

#include <iostream>
#include <fstream>
#include <string>
#include <Winsock2.h>

#pragma comment(lib, "ws2_32.lib")

// 関数のプロトタイプ宣言
std::string calculateHash(const std::string& content);

int main() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "Failed to initialize winsock" << std::endl;
        return 1;
    }

    // ソケットの作成
    SOCKET listenSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (listenSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed" << std::endl;
        WSACleanup();
        return 1;
    }

    // バインド
    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(443);

    if (bind(listenSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Bind failed" << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // リッスン
    if (listen(listenSocket, SOMAXCONN) == SOCKET_ERROR) {
        std::cerr << "Listen failed" << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // クライアントからの接続を待機
    SOCKET clientSocket = accept(listenSocket, NULL, NULL);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Accept failed" << std::endl;
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // データを受信
    const int bufferSize = 1024;
    char buffer[bufferSize];
    int bytesReceived = recv(clientSocket, buffer, bufferSize, 0);
    if (bytesReceived == SOCKET_ERROR) {
        std::cerr << "Receive failed" << std::endl;
        closesocket(clientSocket);
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // 受信したデータを文字列に変換
    std::string receivedData(buffer, bytesReceived);

    // 受信データを分解してファイル名、ファイル内容、およびハッシュを取得
    size_t firstNewLine = receivedData.find('\n');
    if (firstNewLine == std::string::npos) {
        std::cerr << "Invalid data format" << std::endl;
        closesocket(clientSocket);
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    std::string filename = receivedData.substr(0, firstNewLine);

    size_t secondNewLine = receivedData.find('\n', firstNewLine + 1);
    if (secondNewLine == std::string::npos) {
        std::cerr << "Invalid data format" << std::endl;
        closesocket(clientSocket);
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    std::string content = receivedData.substr(firstNewLine + 1, secondNewLine - firstNewLine - 1);
    std::string receivedHash = receivedData.substr(secondNewLine + 1);

    // 受信したファイル内容をハッシュ化して整合性を確認
    std::string calculatedHash = calculateHash(content);
    if (receivedHash != calculatedHash) {
        std::cerr << "File integrity check failed" << std::endl;
        closesocket(clientSocket);
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // ファイルを作成して内容を書き込む
    std::ofstream outputFile(filename);
    if (!outputFile) {
        std::cerr << "Error creating file: " << filename << std::endl;
        closesocket(clientSocket);
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    outputFile << content;
    outputFile.close();

    // クライアントとの接続を閉じる
    closesocket(clientSocket);
    closesocket(listenSocket);

    // Winsockのクリーンアップ
    WSACleanup();

    return 0;
}

std::string calculateHash(const std::string& content) {
    // ファイル内容のハッシュを計算する方法は任意です
    // 例としてSHA256を使用しますが、実際には必要に応じて変更してください
    // (calculateHash関数は前のコードに含まれていた関数をそのまま使用しています)
}
