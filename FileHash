#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <openssl/ssl.h>
#include <openssl/err.h>

// 関数のプロトタイプ宣言
std::string readFile(const std::string& filename);
std::string calculateHash(const std::string& content);
void initOpenSSL();
SSL_CTX* createSSLContext();
void cleanupOpenSSL();

int main() {
    std::string filename = "example.txt"; // 送信したいファイルの名前
    std::string content = readFile(filename);
    std::string hash = calculateHash(content);

    // 送信するデータをつなげる
    std::string dataToSend = filename + "\n" + content + "\n" + hash;

    initOpenSSL();

    // TLS接続のセットアップ
    SSL_CTX* ctx = createSSLContext();
    SSL* ssl;

    // TLSセッションの確立
    int server = 0; // クライアントモードで接続
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in dest;

    dest.sin_family = AF_INET;
    dest.sin_port = htons(443); // 通信先のポート番号 (httpsのデフォルトポート)
    inet_pton(AF_INET, "127.0.0.1", &(dest.sin_addr));

    connect(sockfd, (struct sockaddr*)&dest, sizeof(dest));

    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, sockfd);
    SSL_connect(ssl);

    // データを送信
    SSL_write(ssl, dataToSend.c_str(), dataToSend.size());

    // TLSセッションの終了
    SSL_free(ssl);
    SSL_CTX_free(ctx);
    close(sockfd);

    cleanupOpenSSL();

    return 0;
}

std::string readFile(const std::string& filename) {
    std::ifstream file(filename);
    if (!file) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return "";
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

std::string calculateHash(const std::string& content) {
    // ここでファイル内容のハッシュを計算する方法は任意です
    // 例としてSHA256を使用しますが、実際には必要に応じて変更してください
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((const unsigned char*)content.c_str(), content.size(), hash);

    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }

    return ss.str();
}

void initOpenSSL() {
    SSL_load_error_strings();
    OpenSSL_add_ssl_algorithms();
}

SSL_CTX* createSSLContext() {
    const SSL_METHOD* method = TLSv1_2_client_method();
    SSL_CTX* ctx = SSL_CTX_new(method);
    if (!ctx) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }
    return ctx;
}

void cleanupOpenSSL() {
    EVP_cleanup();
}
