動かす場合
int main()
{
    ClientController clientController;

    // サーバのアドレス（IPアドレスまたはホスト名）を指定して接続
    if (!clientController.connectToServer("127.0.0.1"))
    {
        std::cerr << "Failed to connect to the server." << std::endl;
        return 1;
    }

    // サーバにコマンドを送信
    if (!clientController.sendCommand("Hello, server! This is a command from the client."))
    {
        std::cerr << "Failed to send command to the server." << std::endl;
        return 1;
    }

    // サーバからコマンドを受信
    std::string receivedData = clientController.receiveCommand();
    if (!receivedData.empty())
    {
        std::cout << "Received response from server: " << receivedData << std::endl;
    }

    clientController.disconnectFromServer();

    return 0;
}

ヘッダ

#pragma once

#include <string>
#include <Winsock2.h>
#include <openssl/ssl.h>
#include <openssl/bio.h>

#pragma comment(lib, "ws2_32.lib")

class ClientController
{
public:
    ClientController();
    ~ClientController();

    bool connectToServer(const std::string& serverIp, int serverPort);
    void disconnectFromServer();
    bool sendCommand(const std::string& commandData);
    std::string receiveCommand();

private:
    SSL_CTX* ctx;
    SOCKET clientSocket;
    SSL* ssl;

    void initializeSSL();
    void loadCertificates();
    void cleanupSSL();
};



ソース

#include "ClientController.h"
#include <iostream>

ClientController::ClientController()
{
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        std::cerr << "Failed to initialize Winsock." << std::endl;
        return;
    }

    initializeSSL();
    loadCertificates();
}

ClientController::~ClientController()
{
    cleanupSSL();
    closesocket(clientSocket);
    WSACleanup();
}

bool ClientController::connectToServer(const std::string& serverIp, int serverPort)
{
    // ソケットの作成
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET)
    {
        std::cerr << "Failed to create socket." << std::endl;
        return false;
    }

    // サーバの情報を設定
    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(serverIp.c_str());
    serverAddr.sin_port = htons(serverPort);

    // サーバに接続
    if (connect(clientSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
    {
        std::cerr << "Failed to connect to server." << std::endl;
        closesocket(clientSocket);
        return false;
    }

    // SSLコンテキストを作成し、ソケットをSSL化
    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, clientSocket);
    if (SSL_connect(ssl) <= 0)
    {
        std::cerr << "SSL handshake error." << std::endl;
        closesocket(clientSocket);
        return false;
    }

    return true; // 成功の場合
}

void ClientController::disconnectFromServer()
{
    // ソケットをクローズ
    closesocket(clientSocket);
}

bool ClientController::sendCommand(const std::string& commandData)
{
    if (!ssl)
    {
        std::cerr << "No active SSL connection." << std::endl;
        return false;
    }

    int bytesSent = SSL_write(ssl, commandData.c_str(), commandData.size());
    if (bytesSent <= 0)
    {
        std::cerr << "Failed to send command data." << std::endl;
        return false;
    }

    return true; // 成功の場合
}

std::string ClientController::receiveCommand()
{
    std::string receivedData;

    if (!ssl)
    {
        std::cerr << "No active SSL connection." << std::endl;
        return receivedData;
    }

    const int bufferSize = 1024;
    char buffer[bufferSize];

    int bytesRead = SSL_read(ssl, buffer, bufferSize - 1);
    if (bytesRead <= 0)
    {
        std::cerr << "Failed to receive command data." << std::endl;
        return receivedData;
    }

    buffer[bytesRead] = '\0';
    receivedData = buffer;

    return receivedData;
}
